#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "GameHouse.h"

// --- Infraestrutura Simples de Teste ---
static int total_tests = 0;
static int passed_tests = 0;

void check(bool condition, const char* test_name) {
    total_tests++;
    if (condition) {
        passed_tests++;
        printf("  [PASS] %s\n", test_name);
    } else {
        printf("  [FAIL] %s\n", test_name);
    }
}

// --- Funções Auxiliares ---
const char* status_cliente_to_string(GameHouse__STATUS_CLIENTE s) {
    switch (s) {
        case GameHouse__ativo: return "Ativo";
        case GameHouse__inativo: return "Inativo";
        case GameHouse__em_espera: return "Em Espera";
        default: return "Desconhecido";
    }
}

// --- Funções de Teste por Cenário ---

// Função auxiliar para verificar o status de um cliente específico
bool get_client_status(GameHouse__CLIENTES id, GameHouse__STATUS_CLIENTE* status) {
    bool more, found = false;
    GameHouse__CLIENTES cc;
    GameHouse__STATUS_CLIENTE ss;
    int32_t cr;

    GameHouse__init_clientes_info();
    GameHouse__has_more_clientes_info(&more);
    while (more && !found) {
        GameHouse__get_next_cliente_info(&cc, &ss, &cr);
        if (cc == id) {
            *status = ss;
            found = true;
        }
        GameHouse__has_more_clientes_info(&more);
    }
    return found;
}


void test_fluxo_completo_cliente() {
    printf("\n--- Testando: Fluxo Completo de um Cliente ---\n");
    bool ok;
    int32_t creditos, pos;
    GameHouse__STATUS_CLIENTE status_atual;
    GameHouse__CLIENTES cliente_id = 50;
    GameHouse__DISPOSITIVOS dev_id = 101;
    GameHouse__JOGOS game_id = 1001;

    GameHouse__INITIALISATION();
    // Setup
    GameHouse__add_tipo_dispositivo(1);
    GameHouse__add_dispositivo(dev_id, 1);
    GameHouse__add_jogo(game_id, 1);
    GameHouse__instalar_jogo(dev_id, game_id);
    GameHouse__add_cliente(cliente_id);

    // Compra de créditos
    GameHouse__comprar_creditos(cliente_id, 2);

    // Entrar na Fila
    GameHouse__pre_entrar_fila_dispositivo(cliente_id, dev_id, game_id, &ok);
    check(ok, "Pre-condicao para entrar na fila");
    if(ok) {
        GameHouse__entrar_fila_dispositivo(cliente_id, dev_id, game_id);
        printf("  Acao: Tentativa de colocar cliente %d na fila do dispositivo %d\n", cliente_id, dev_id);
    }

    // VERIFICAÇÃO ADICIONAL: O cliente realmente entrou na fila e seu status mudou?
    get_client_status(cliente_id, &status_atual);
    check(status_atual == GameHouse__em_espera, "Status do cliente deve ser 'Em Espera' apos entrar na fila.");

    GameHouse__posicao_fila(cliente_id, dev_id, &pos);
    check(pos == 1, "Cliente deve ser o 1º na fila");

    // Iniciar Sessão
    GameHouse__pre_iniciar_sessao(dev_id, &ok);
    check(ok, "Pode iniciar sessao com alguem na fila");
    if(ok) {
       GameHouse__iniciar_sessao_fila(dev_id);
       printf("  Acao: Sessao iniciada para cliente %d no dispositivo %d\n", cliente_id, dev_id);
    }

    // Verificar estado durante a sessão
    bool more;
    GameHouse__CLIENTES cc;
    GameHouse__STATUS_CLIENTE ss;
    GameHouse__init_clientes_info();
    GameHouse__has_more_clientes_info(&more);
    GameHouse__get_next_cliente_info(&cc, &ss, &creditos);
    check(cc == cliente_id && ss == GameHouse__ativo && creditos == 1, "Estado do cliente durante sessao (Ativo, 1 credito)");

    // Encerrar Sessão
    GameHouse__pre_encerrar_sessao(cliente_id, &ok);
    check(ok, "Pode encerrar a sessao do cliente");
    if(ok){
        GameHouse__encerrar_sessao(cliente_id);
        printf("  Acao: Sessao encerrada para cliente %d\n", cliente_id);
    }

    // Verificar estado final
    get_client_status(cliente_id, &status_atual);
    check(status_atual == GameHouse__inativo, "Estado do cliente apos sessao (Inativo)");
}


// --- Função Principal e demais testes (sem alterações) ---

void test_setup_e_gerenciamento_basico() {
    printf("\n--- Testando: Gerenciamento Basico (Adicionar/Remover) ---\n");
    bool ok;

    GameHouse__INITIALISATION();

    GameHouse__pre_add_tipo_dispositivo(1, &ok);
    check(ok, "Pre-condicao para adicionar tipo 1 (PC)");
    GameHouse__add_tipo_dispositivo(1);

    GameHouse__pre_add_tipo_dispositivo(2, &ok);
    check(ok, "Pre-condicao para adicionar tipo 2 (Console)");
    GameHouse__add_tipo_dispositivo(2);

    GameHouse__pre_add_tipo_dispositivo(1, &ok);
    check(!ok, "Pre-condicao deve falhar ao adicionar tipo duplicado");

    GameHouse__add_dispositivo(101, 1);
    GameHouse__add_dispositivo(201, 2);
    GameHouse__add_jogo(1001, 1);
    GameHouse__add_jogo(2001, 2);

    GameHouse__pre_instalar_jogo(101, 2001, &ok);
    check(!ok, "Pre-condicao deve falhar ao instalar jogo de console em PC");

    GameHouse__pre_instalar_jogo(101, 1001, &ok);
    check(ok, "Pre-condicao para instalar jogo de PC em PC");
    GameHouse__instalar_jogo(101, 1001);

    GameHouse__pre_remove_tipo_dispositivo(1, &ok);
    check(!ok, "Pre-condicao deve falhar ao remover tipo de dispositivo em uso");
}

void test_violacoes_de_invariante() {
    printf("\n--- Testando: Tentativas de Violar Invariantes ---\n");
    bool ok;
    GameHouse__INITIALISATION();

    GameHouse__add_tipo_dispositivo(1); GameHouse__add_tipo_dispositivo(2);
    GameHouse__add_dispositivo(10, 1); GameHouse__add_dispositivo(20, 2);
    GameHouse__add_jogo(100, 1); GameHouse__add_jogo(200, 2);
    GameHouse__instalar_jogo(10, 100); GameHouse__instalar_jogo(20, 200);
    GameHouse__add_cliente(1); GameHouse__add_cliente(2);
    GameHouse__comprar_creditos(1, 3);

    GameHouse__entrar_fila_dispositivo(1, 10, 100);
    printf("  Acao: Cliente 1 entrou na fila do dispositivo 10\n");
    GameHouse__pre_entrar_fila_dispositivo(1, 20, 200, &ok);
    check(!ok, "Cliente nao pode entrar em uma segunda fila");

    GameHouse__pre_banir_cliente(1, &ok);
    check(!ok, "Nao pode banir cliente que esta na fila");
    GameHouse__sair_fila_dispositivo(1, 10);
    GameHouse__pre_banir_cliente(1, &ok);
    check(ok, "Pode banir cliente apos ele sair da fila");
    GameHouse__banir_cliente(1);
    printf("  Acao: Cliente 1 saiu da fila e foi banido\n");

    GameHouse__comprar_creditos(2, 1);
    GameHouse__entrar_fila_dispositivo(2, 20, 200);
    printf("  Acao: Cliente 2 entrou na fila do dispositivo 20\n");
    GameHouse__pre_remove_dispositivo(20, &ok);
    check(!ok, "Nao pode remover dispositivo com fila nao-vazia");

    GameHouse__iniciar_sessao_fila(20);
    printf("  Acao: Sessao iniciada para cliente 2 no dispositivo 20\n");
    GameHouse__pre_remove_dispositivo(20, &ok);
    check(!ok, "Nao pode remover dispositivo em uso");
}


int main(void) {
    printf("=======================================\n");
    printf("INICIANDO TESTES AUTOMATICOS (VERSAO DEPURADA)\n");
    printf("=======================================\n");

    test_setup_e_gerenciamento_basico();
    test_fluxo_completo_cliente();
    test_violacoes_de_invariante();
    // O teste de iteradores foi omitido para focar na falha principal

    printf("\n=======================================\n");
    printf("Resumo dos Testes:\n");
    printf("  Total Executado: %d\n", total_tests);
    printf("  Aprovados:       %d\n", passed_tests);
    printf("  Falhas:          %d\n", total_tests - passed_tests);
    printf("=======================================\n");

    return (passed_tests == total_tests) ? 0 : 1;
}